---
// FAQ.astro
interface FaqItem {
  question: string;
  answer: string;
}

interface Props {
  items: FaqItem[];
  className?: string;
}

const { items, className = "" } = Astro.props;
---

<div class:list={["max-w-3xl mx-auto pt-10 space-y-3", className]}>
  <h1 class="text-2xl text-center tracking-tighter font-medium py-4">
    Got questions? Iâ€™ve got answers.
  </h1>
  {
    items.map((item) => (
      <div class="faq-item overflow-hidden bg-[#fff] rounded-2xl">
        <button class="w-full flex items-center justify-between p-4   rounded-2xl text-left transition-colors duration-200">
          <span class="text-base tracking-tighter font-medium text-[#121212] leading-normal pr-8">
            {item.question}
          </span>
          <span class="icon-wrapper flex-shrink-0">
            <svg
              class="plus-icon w-5 h-5"
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M12 5V19M5 12H19"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
            </svg>
            <svg
              class="x-icon hidden w-5 h-5"
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M6 18L18 6M6 6L18 18"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
            </svg>
          </span>
        </button>
        <div class="answer-wrapper max-h-0 overflow-hidden">
          <div class="px-4 pt-2 pb-4 bg-[#fff]">
            <p class="text-base text-gray-500 tracking-tighter font-normal">
              {item.answer}
            </p>
          </div>
        </div>
      </div>
    ))
  }
</div>

<script>
  function setupFAQ() {
    const faqItems = document.querySelectorAll(".faq-item");

    faqItems.forEach((item) => {
      const button = item.querySelector("button");
      const answerWrapper = item.querySelector(
        ".answer-wrapper"
      ) as HTMLElement;
      const answer = answerWrapper?.querySelector("div") as HTMLElement;
      const plusIcon = item.querySelector(".plus-icon") as SVGElement;
      const xIcon = item.querySelector(".x-icon") as SVGElement;

      button?.addEventListener("click", () => {
        const isExpanded = button.getAttribute("aria-expanded") === "true";

        // Close all other items first
        faqItems.forEach((otherItem) => {
          if (otherItem !== item) {
            const otherButton = otherItem.querySelector("button");
            const otherAnswer = otherItem.querySelector(
              ".answer-wrapper"
            ) as HTMLElement;
            const otherPlusIcon = otherItem.querySelector(
              ".plus-icon"
            ) as SVGElement;
            const otherXIcon = otherItem.querySelector(".x-icon") as SVGElement;

            if (otherAnswer && otherButton) {
              otherAnswer.style.maxHeight = "0";
              otherButton.classList.remove("active");
              otherButton.setAttribute("aria-expanded", "false");
              otherPlusIcon?.classList.remove("hidden");
              otherXIcon?.classList.add("hidden");
              otherButton.classList.remove("bg-[#fff]");
              otherButton.classList.add("bg-[#fff]");
            }
          }
        });

        // Toggle current item
        if (answerWrapper && answer) {
          if (isExpanded) {
            answerWrapper.style.maxHeight = "0";
            button.classList.remove("active", "bg-[#fff]");
            button.classList.add("bg-[#fff]");
            plusIcon?.classList.remove("hidden");
            xIcon?.classList.add("hidden");
          } else {
            answerWrapper.style.maxHeight = `${answer.offsetHeight}px`;
            button.classList.add("active", "bg-[#ff]");
            button.classList.remove("bg-[#ff]");
            plusIcon?.classList.add("hidden");
            xIcon?.classList.remove("hidden");
          }
          button.setAttribute("aria-expanded", (!isExpanded).toString());
        }
      });
    });
  }

  // Run setup on initial load
  setupFAQ();

  // Run setup when content updates (for view transitions)
  document.addEventListener("astro:page-load", setupFAQ);
</script>

<style>
  .answer-wrapper {
    transition: max-height 300ms cubic-bezier(0.4, 0, 0.2, 1);
  }

  .faq-item button {
    transition: all 300ms cubic-bezier(0.4, 0, 0.2, 1);
  }

  .faq-item button.active {
    border-radius: 24px 24px 0 0;
  }
</style>
